generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  login      String  @unique
  firstName  String
  middleName String?
  lastName   String

  password     String
  tempPassword String?

  rights  Role[]   @default([USER])
  Teacher Teacher?
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model Teacher {
  id                  String                        @id @default(uuid())
  position            Position                      @relation(fields: [positionId], references: [id])
  department          Department                    @relation(fields: [departmentId], references: [id])
  user                User                          @relation(fields: [userId], references: [id])
  userId              String                        @unique
  departmentId        String
  positionId          String
  textWishId          String?                       @unique
  textWish            TextWish?
  ScheduleWish        ScheduleWish[]
  assignments         TeacherDisciplineAssignment[] @relation("TeacherDisciplineAssignments")
  SchedulePairTeacher SchedulePairTeacher[]
}

model TeacherDisciplineAssignment {
  id             String         @id @default(cuid())
  discipline     String // Название дисциплины
  type           String // Например, "lecture" или "practice"
  teachers       Teacher[]      @relation("TeacherDisciplineAssignments")
  audienceType   AudienceType?  @relation(fields: [audienceTypeId], references: [id])
  audienceTypeId String? // Внешний ключ для типа аудитории
  SchedulePair   SchedulePair[]

  @@unique([discipline, type], name: "discipline_type")
}

// Модель для глобального текстового пожелания
model TextWish {
  id        String  @id @default(cuid())
  teacherId String  @unique
  teacher   Teacher @relation(fields: [teacherId], references: [id]) // Оставляем @relation только здесь
  wishText  String?
}

model Position {
  id       String    @id @default(uuid())
  title    String    @unique
  teachers Teacher[]
}

model Department {
  id       String    @id @default(uuid())
  title    String
  teachers Teacher[]
}

model Audience {
  id               String              @id @default(uuid())
  title            String
  type             AudienceType        @relation(fields: [audienceTypeId], references: [id])
  building         Building            @relation(fields: [buildingId], references: [id])
  capacity         Int
  additionalInfo   String?
  equipment        AudienceEquipment[] // Используем таблицу-связку
  buildingId       String
  audienceTypeId   String
  SchedulePairRoom SchedulePairRoom[]
}

model Equipment {
  id        String              @id @default(uuid())
  title     String
  audiences AudienceEquipment[] // Используем таблицу-связку
}

model AudienceEquipment {
  id          String    @id @default(uuid())
  audienceId  String
  equipmentId String
  audience    Audience  @relation(fields: [audienceId], references: [id])
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  @@unique([audienceId, equipmentId]) // Уникальная связь, предотвращающая дублирование
}

model Building {
  id       String     @id @default(uuid())
  title    String
  Audience Audience[]
}

model AudienceType {
  id                          String                        @id @default(uuid())
  title                       String
  Audience                    Audience[]
  TeacherDisciplineAssignment TeacherDisciplineAssignment[]
}

model ScheduleWish {
  id         String   @id @default(cuid())
  weekType   String
  day        String
  timeSlot   String
  discipline String?
  room       String?
  createdAt  DateTime @default(now())
  teacherId  String?
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
}

model UploadedFiles {
  id         String   @id @default(uuid())
  filename   String
  path       String
  IsFullTime Boolean?
  createdAt  DateTime @default(now())
}

model StudyPlan {
  id           String         @id @default(cuid())
  title        String
  disciplines  Discipline[]
  groups       Group[]
  SemesterWeek SemesterWeek[]
  SchedulePair SchedulePair[]
}

model SemesterWeek {
  id          String    @id @default(cuid())
  week_1      Int
  week_2      Int
  week_3      Int
  week_4      Int
  week_5      Int
  week_6      Int
  week_7      Int
  week_8      Int
  studyPlanId String
  studyPlan   StudyPlan @relation(fields: [studyPlanId], references: [id])
}

model Group {
  id             String     @id @default(cuid())
  title          String     @unique
  code           String?
  countStudents  String     @map("count_students")
  direction      String?
  formEducation  String?
  durationPeriod Int?
  yearEnrollment DateTime?  @map("year_enrollment")
  studyPlanId    String?
  studyPlan      StudyPlan? @relation(fields: [studyPlanId], references: [id])

  disciplineAssignments DisciplineGroupAssignment[] @relation("GroupAssignments") // Обратная связь
  SchedulePairGroup     SchedulePairGroup[]

  @@index([studyPlanId], map: "study_plan_idx")
}

model Discipline {
  id                  String         @id @default(cuid())
  name                String
  semester            Int
  lecture_hours       Int?
  el_lecture_hours    Int?
  laboratory_hours    Int?
  el_laboratory_hours Int?
  practice_hours      Int?
  el_practice_hours   Int?
  control             String?
  studyPlanId         String
  studyPlan           StudyPlan      @relation(fields: [studyPlanId], references: [id])
  SchedulePair        SchedulePair[]
}

model DisciplineGroupAssignment {
  id         String  @id @default(cuid()) // Уникальный ID
  discipline String // Название дисциплины
  groups     Group[] @relation("GroupAssignments") // Массив групп
  semester   Int // Семестр
}

enum WeekType {
  EVEN // чётная
  ODD // нечётная
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model TimeSlot {
  id           String         @id // например, "08:30-10:00"
  start        String // начало слота, например "08:30"
  end          String // конец слота, например "10:00"
  title        String // полное название, например "08:30 — 10:00"
  SchedulePair SchedulePair[]
}

model SchedulePair {
  id         String    @id @default(uuid())
  halfYear   String // "2021H2"
  weekType   WeekType?
  numberWeek Int?
  dayOfWeek  DayOfWeek
  timeSlotId String
  timeSlot   TimeSlot  @relation(fields: [timeSlotId], references: [id])

  studyPlanId String
  studyPlan   StudyPlan @relation(fields: [studyPlanId], references: [id])

  assignment   TeacherDisciplineAssignment @relation(fields: [assignmentId], references: [id])
  assignmentId String

  isOnline Boolean @default(false)

  groups       SchedulePairGroup[]
  teachers     SchedulePairTeacher[]
  rooms        SchedulePairRoom[]
  Discipline   Discipline?           @relation(fields: [disciplineId], references: [id])
  disciplineId String?

  @@index([halfYear, weekType, dayOfWeek, timeSlotId])
  @@index([halfYear, numberWeek, dayOfWeek, timeSlotId])
}

model SchedulePairGroup {
  pairId  String
  groupId String

  pair  SchedulePair @relation(fields: [pairId], references: [id])
  group Group        @relation(fields: [groupId], references: [id])

  @@id([pairId, groupId])
}

model SchedulePairTeacher {
  pairId    String
  teacherId String

  pair    SchedulePair @relation(fields: [pairId], references: [id])
  teacher Teacher      @relation(fields: [teacherId], references: [id])

  @@id([pairId, teacherId])
}

model SchedulePairRoom {
  pairId     String
  audienceId String

  pair     SchedulePair @relation(fields: [pairId], references: [id])
  audience Audience     @relation(fields: [audienceId], references: [id])

  @@id([pairId, audienceId])
}
