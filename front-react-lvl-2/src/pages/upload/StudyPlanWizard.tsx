import { disciplineService } from '@/services/disciplines/discipline.service'
import groupService from '@/services/group/group.service'
import { UploadOutlined } from '@ant-design/icons'
import { useQuery } from '@tanstack/react-query'
import {
	Button,
	Checkbox,
	Form,
	Input,
	InputNumber,
	message,
	Segmented,
	Select,
	Splitter,
	Steps,
	Table,
	Upload,
} from 'antd'
import axios from 'axios'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { CSSTransition, TransitionGroup } from 'react-transition-group'
import { Group } from '../groups/Group'
import './StudyPlanWizard.css' // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

const { Step } = Steps

const StudyPlanWizard = () => {
	const [currentStep, setCurrentStep] = useState(0)
	const [fileId, setFileId] = useState<string | null>(null)
	const [fileUrl, setFileUrl] = useState<string | null>(null)
	const [parsedData, setParsedData] = useState([])
	const [selectedFile, setSelectedFile] = useState<File | null>(null)
	const [selectedSemester, setSelectedSemester] = useState<number>(1)
	const [studyPlanId, setStudyPlanId] = useState()
	const [studyMode, setStudyMode] = useState<boolean>(false)

	const uploadUrl = studyMode
		? 'http://localhost:4200/api/parser/file'
		: 'http://localhost:4200/api/parser/fileDistance'

	// ‚úÖ –ó–∞–ø—Ä–æ—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø–æ `studyPlanId`
	const {
		data: disciplinesData = [],
		isLoading,
		error,
	} = useQuery({
		queryKey: ['disciplines', studyPlanId],
		queryFn: () =>
			studyPlanId?.data?.id
				? disciplineService.getDisciplines('cm8q9b3y10003668gthnior9q')
				: [],
		enabled: !!studyPlanId, // ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ `fileId` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	})

	const {
		data: groupsData,
		isGroupLoading,
		errorGroup,
	} = useQuery<Group[]>({
		queryKey: ['groups'],
		queryFn: () => groupService.getAll(),
	})

	// –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–º–µ—Å—Ç—Ä—É
	const filteredDisciplines = disciplinesData.filter(
		discipline => discipline.semester === selectedSemester
	)

	// –û–±–Ω–æ–≤–ª—è–µ–º `file` –≤ `state` –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
	const beforeUpload = (file: File) => {
		setSelectedFile(file)
		return false
	}

	const handleUpload = async () => {
		if (!selectedFile) {
			message.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π!')
			return
		}

		const formData = new FormData()
		formData.append('file', selectedFile)

		try {
			const response = await axios.post(uploadUrl, formData, {
				headers: { 'Content-Type': 'multipart/form-data' },
			})

			console.log(response.data)

			message.success('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!')
			setTimeout(() => {
				setFileId(response.data.file.id)
				setCurrentStep(1)
			}, 500) // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
			// setFileId(response.data.file.id);
			// setCurrentStep(1);
		} catch (error) {
			message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
		}
	}

	// 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –¥–ª—è `iframe`
	useEffect(() => {
		if (!fileId) return
		const fetchFileUrl = async () => {
			try {
				const response = await axios.get(
					`http://localhost:4200/api/parser/${fileId}`
				)
				setFileUrl(response.data.fileUrl)
			} catch (error) {
				message.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞')
			}
		}
		fetchFileUrl()
	}, [fileId])

	// 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	const handleParse = async (values: any) => {
		if (!fileId) return
		console.log(values)
		try {
			const response = await axios.post(
				`http://localhost:4200/api/parser/parse/${fileId}`,
				values
			)
			console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data.data)

			setStudyPlanId(response?.data)
			message.success('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!')
			// setCurrentStep(2);
			setTimeout(() => {
				setCurrentStep(2)
			}, 500) // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
		} catch (error) {
			message.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞')
			console.error(error)
		}
	}

	const navigate = useNavigate() // ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä

	const resetAndStartNew = () => {
		setFileId(null)
		setFileUrl(null)
		setParsedData([])
		setSelectedFile(null)
		setCurrentStep(0) // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
	}

	const goToConstructor = () => {
		navigate('/constructor') // ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
	}

	return (
		<div>
			<Steps current={currentStep} className='mb-4'>
				<Step title='–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞' />
				<Step title='–ù–∞—Å—Ç—Ä–æ–π–∫–∞' />
				<Step title='–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞' />
			</Steps>

			{/* üîπ –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ */}
			<TransitionGroup>
				<CSSTransition key={currentStep} classNames='fade' timeout={500}>
					<div>
						{/* üîπ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
						{currentStep === 0 && (
							<div className='mt-20 flex flex-col justify-center items-center gap-4'>
								<Checkbox
									checked={studyMode}
									onChange={e => setStudyMode(e.target.checked)}
								>
									–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π
								</Checkbox>

								<Upload
									beforeUpload={beforeUpload}
									accept='.xlsx,.xls'
									showUploadList={false}
								>
									<Button icon={<UploadOutlined />}>
										–í—ã–±—Ä–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
									</Button>
								</Upload>
								<Button
									type='primary'
									onClick={handleUpload}
									disabled={!selectedFile}
								>
									–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
								</Button>
							</div>
						)}

						{/* üîπ –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
						{currentStep === 1 && (
							<>
								<Splitter>
									<Splitter.Panel
										defaultSize='20%'
										min='20%'
										max='70%'
										className='mr-4'
									>
										<Form layout='vertical' onFinish={handleParse}>
											<Form.Item
												name='title'
												label='–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞'
												rules={[{ required: true }]}
											>
												<Input placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' />
											</Form.Item>
											{[1, 2, 3, 4].map(num => (
												<div key={num}>
													<Form.Item
														name={`start_${num}`}
														label={`–ù–∞—á–∞–ª–æ ${num} —Å–µ–º–µ—Å—Ç—Ä–∞`}
														rules={[{ required: true }]}
													>
														<InputNumber style={{ width: '100%' }} />
													</Form.Item>
													<Form.Item
														name={`end_${num}`}
														label={`–ö–æ–Ω–µ—Ü ${num} —Å–µ–º–µ—Å—Ç—Ä–∞`}
														rules={[{ required: true }]}
													>
														<InputNumber style={{ width: '100%' }} />
													</Form.Item>
												</div>
											))}
											<Form.Item
												name='groups'
												label='–ì—Ä—É–ø–ø—ã'
												rules={[
													{
														required: true,
														message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É',
													},
												]}
											>
												<Select
													mode='multiple'
													placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã'
													loading={isGroupLoading}
												>
													{groupsData?.map(group => (
														<Select.Option key={group.id} value={group.id}>
															{group.title}
														</Select.Option>
													))}
												</Select>
											</Form.Item>
											<Button type='primary' htmlType='submit'>
												–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
											</Button>
										</Form>
									</Splitter.Panel>

									<Splitter.Panel className='ml-4'>
										<h3>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª</h3>
										<iframe
											src={`https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(
												fakeFileUrl
											)}`}
											width='100%'
											height='500px'
										/>
									</Splitter.Panel>
								</Splitter>
							</>
						)}

						{/* üîπ –®–∞–≥ 3: –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
						{currentStep === 2 && (
							<Splitter>
								<Splitter.Panel
									defaultSize='50%'
									min='30%'
									max='70%'
									className='mr-4'
								>
									<div className='flex flex-col'>
										<div
											style={{
												// marginTop: '20px',
												display: 'flex',
												gap: '10px',
											}}
										>
											<Button type='default' onClick={resetAndStartNew}>
												–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
											</Button>
											<Button type='primary' onClick={goToConstructor}>
												–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
											</Button>
										</div>
										<Segmented
											options={[1, 2, 3, 4, 5, 6, 7, 8].map(num => ({
												label: `–°–µ–º–µ—Å—Ç—Ä ${num}`,
												value: num,
											}))}
											value={selectedSemester}
											onChange={value => setSelectedSemester(value as number)}
											className='left-0 w-fit mb-4 mt-4'
										/>
										<Table
											dataSource={filteredDisciplines}
											columns={[
												{ title: '–ù–∞–∑–≤–∞–Ω–∏–µ', dataIndex: 'name', key: 'name' },
												{
													title: '–õ–µ–∫',
													dataIndex: 'lecture_hours',
													key: 'lecture_hours',
												},
												{
													title: '–õ–µ–∫ —ç–ª–µ–∫—Ç—Ä',
													dataIndex: 'el_lecture_hours',
													key: 'el_lecture_hours',
												},
												{
													title: '–õ–∞–±',
													dataIndex: 'laboratory_hours',
													key: 'laboratory_hours',
												},
												{
													title: '–õ–∞–± —ç–ª–µ–∫—Ç—Ä',
													dataIndex: 'el_lecture_hours',
													key: 'el_lecture_hours',
												},
												{
													title: '–ü—Ä',
													dataIndex: 'practice_hours',
													key: 'practice_hours',
												},
												{
													title: '–ü—Ä —ç–ª–µ–∫—Ç—Ä',
													dataIndex: 'el_practice_hours',
													key: 'el_practice_hours',
												},
												{
													title: '–ö–æ–Ω—Ç—Ä–æ–ª—å',
													dataIndex: 'control',
													key: 'control',
												},
											]}
											pagination={false}
											rowKey='id'
											loading={isLoading}
										/>

										{/* <div
											style={{
												marginTop: '20px',
												display: 'flex',
												gap: '10px',
											}}
										>
											<Button type='default' onClick={resetAndStartNew}>
												–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
											</Button>
											<Button type='primary' onClick={goToConstructor}>
												–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
											</Button>
										</div> */}
									</div>
								</Splitter.Panel>
								<Splitter.Panel className='ml-4'>
									<div>
										<iframe
											src={`https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(
												fakeFileUrl
											)}`}
											width='100%'
											height='900px'
											style={{ border: '1px solid #ddd' }}
										/>
									</div>
								</Splitter.Panel>
							</Splitter>
						)}
					</div>
				</CSSTransition>
			</TransitionGroup>
		</div>
	)
}

export default StudyPlanWizard
